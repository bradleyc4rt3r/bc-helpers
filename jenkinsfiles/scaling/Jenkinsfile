#!groovy

pipeline {
  agent { label 'jenkins-slave' }

  environment {
    REGION = 'us-east-1'
    APP_REPO_URL = ''
    CRED_REPO_URL = ''
    BG_SERVICES_REPO_URL = ''
    APP_BRANCH = "${BRANCH_TAG}"
  }
  
  parameters {
    choice name: 'ENV', choices: ['dev', 'trk', 'trn'], description: 'Choose a platform to deploy to'
    choice name: 'ACTION', choices: ['scale-in', 'scale-out'], description: 'Scaling action: SCALE-IN - Terraform destroys the EKS cluster, SCALE-OUT - Terraform deploys the EKS cluster'
    choice name: 'CLUSTER', choices: ['##########-dev-va-eks-cluster-v1'], description: 'Choose a cluster to scale'
    choice(name: 'BRANCH_TAG', choices: ['develop', 'main'], description: 'Select branch to deploy from')
  // To be implemented in V1
  //gitParameter branch: '', branchFilter: '.*', defaultValue: 'v0', description: 'Select a docker tag to deploy', listSize: '10', name: 'tag', quickFilterEnabled: false, selectedValue: 'TOP', sortMode: 'DESCENDING_SMART', tagFilter: 'v[0-9]*', type: 'PT_TAG'
  }

  options {
      disableConcurrentBuilds()
      skipDefaultCheckout()
      skipStagesAfterUnstable()
      timestamps()
      ansiColor('xterm')
  }

  stages {
    stage('Clean Workspace') {
        steps {
            cleanWs()
        }
    }

    stage('Clone Credential') {
      steps {
        dir('credential') {
          deleteDir()
          git branch: 'main',
                        credentialsId: 'github-ssh-key-credential',
                        url: "${env.CRED_REPO_URL}"
        }
      }
    }

    stage('Decrypt-AWS-Creds') {
      steps {
        withCredentials([string(credentialsId: 'gpg-key', variable: 'GPG_KEY')]) {
          sh '''
            echo "Decrypting AWS credentials.."
            mkdir -p ${HOME}/.aws
            gpg --quiet --batch --yes --decrypt \
                --passphrase="${GPG_KEY}" \
                --output ${HOME}/.aws/config \
                ./credential/aws_config.gpg
            '''
        }
      }
    }

    stage('Decrypt-SSH-Creds') {
      steps {
        withCredentials([string(credentialsId: 'gpg-key', variable: 'GPG_KEY')]) {
          sh '''
          echo "Decrypting SSH credentials.."
          mkdir -p ${HOME}/.ssh
          gpg --quiet --batch --yes --decrypt \
              --passphrase="${GPG_KEY}" \
              --output ${HOME}/.ssh/config \
              ./credential/ssh_config.gpg
          gpg --quiet --batch --yes --decrypt \
              --passphrase="${GPG_KEY}" \
              --output ${HOME}/.ssh/##########-dev-va-ec2-kp \
              ./credential/##########_dev_va_ec2_kp.gpg
          chmod 0600 ${HOME}/.ssh/##########-dev-va-ec2-kp | true
          '''
        }
      }
    }

    stage('Clone App') {
      steps {
        dir("app") {
          deleteDir()
          git branch: "${env.APP_BRANCH}",
              credentialsId: 'github-ssh-key-credential',
              url: "${env.APP_REPO_URL}"
        }
      }
    }

    stage('Clone Background Services') {
      steps {
        dir('background-services') {
          deleteDir()
          git branch: "develop",
              credentialsId: 'gitlab-ssh-key-credential',
              url: "${env.BG_SERVICES_REPO_URL}"
        }
      }
    }

    stage('Helm Uninstall Background Services') {
      when {
        beforeAgent true
        expression { params.ACTION == 'scale-in' }
      }
      steps {
        script {
          // Helm.sh args - $REGION $ENV $ACTION $APP $TAG
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} uninstall gluster latest"
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} uninstall zookeeper latest"
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} uninstall kafka latest"
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} uninstall memcached latest"
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} uninstall rabbitmq latest"
        }
      }
    }

    stage('Destroy Cluster') {
      when {
        beforeAgent true
        expression { params.ACTION == 'scale-in' }
      }
      steps {
        script {
          currentBuild.description = "${env.tag} ${ENV} ${ACTION}"
          sh '''
            cd app/eks-##########/terraform/app-infra
            sh terraform.sh ${ENV} destroy
          '''
        }
      }
    }

    stage('Deploy Cluster') {
      when {
        beforeAgent true
        expression { params.ACTION == 'scale-out' }
      }
      steps {
        script {
          currentBuild.description = "${ENV} ${ACTION}"
          sh '''
            cd app/eks-##########/terraform/app-infra
            sh terraform.sh ${ENV} apply
          '''
        }
      }
    }

    stage('Deploy Ansible Vault') {
      environment { VAULT_KEY = credentials('ansible-vault') }
      when {
        beforeAgent true
        expression { params.ACTION == 'scale-out' }
      }
      steps {
        sh '''
        cp ${VAULT_KEY} ${HOME}/
        '''
      }
    }

    stage('Run Ansible') {
      when {
        beforeAgent true
        expression { params.ACTION == 'scale-out' }
      }
      steps {
        sh '''
          cd app/eks-##########/ansible/
          ./play books/gluster-volume.yaml"
        '''
      }
    }

    stage('Build Background Services Images') {
      when {
        beforeAgent true
        expression{ params.ACTION == 'scale-out' }
      }
      steps {
        build job: 'build-background-services', 
              parameters: [
                string(name: 'ENV_NAME', value: "${ENV}"), 
                string(name: 'SERVICE', value: "zookeeper"), 
                string(name: 'BRANCH_TAG', value: "develop")
        ]

        build job: 'build-background-services', 
              parameters: [
                string(name: 'ENV_NAME', value: "${ENV}"), 
                string(name: 'SERVICE', value: "kafka"), 
                string(name: 'BRANCH_TAG', value: "develop")
        ]

        build job: 'build-background-services', 
              parameters: [
                string(name: 'ENV_NAME', value: "${ENV}"), 
                string(name: 'SERVICE', value: "memcached"), 
                string(name: 'BRANCH_TAG', value: "develop")
        ]

        build job: 'build-background-services', 
              parameters: [
                string(name: 'ENV_-NAME', value: "${ENV}"), 
                string(name: 'SERVICE', value: "rabbit-manager"), 
                string(name: 'BRANCH_TAG', value: "develop")
        ]

      }
    }

    stage('Helm Install Background Services') {
      when {
        beforeAgent true
        expression { params.ACTION == 'scale-out' }
      }
      steps {
        script {
          // Helm.sh args - $REGION $ENV $ACTION $APP $TAG
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} install gluster latest"
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} install zookeeper latest"
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} install kafka latest"
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} install memcached latest"
          sh "bash background-services/helm/tools/helm.sh ${env.REGION} ${params.ENV} install rabbitmq latest"
        }
      }
    }

  }
}

